from Crypto.Util.number import getStrongPrime, inverse, GCD, bytes_to_long
import random

FLAG = b"L30n4rd_M19ht_B3_0ld_But_5t1ll_Cunn1n9"
e = 0x10001
"""
while True:
    for k in range(5):
        p = getStrongPrime(2048)
        q = getStrongPrime(2048)
        phi = (p-1)*(q-1)
        d = inverse(e, phi)
    if d > 1 and GCD(e, phi) == 1 and d*e//phi > e//2:
        break
"""

p = 25976821395180198476743068529695931880319978338480531691610415661361401931383097486637715966519433444600807436568625937170979947873109031178446327528398133145852049984204078014724520864936860101756642039506218037953918533626073449723898770930566216765820733105518446966884286106440581562933325551827323765319957510225607773424265969039937937742979396790704924716173393298279572575415013924464004992696906463318297071939524223942163524421603677237782079779000276716830833229497904981348154148071553210843011778941555658376873636449024640227467452726636452188197668389647887691103200225867892463479256186176578143767139
q = 27605844637206123282365368266418414490783159709786016035962764759078992540909426425405085663430202920502543886474583189795540626725052660622042231382059734513979163968742885314941389546369638383616783370156539696163142260612881872970764962829190710418319853457587970524661913509645654505724641474005151409502619326034959972325147682714200899207495143506390740638363467361368301365504608630260859776912592195031536476367664699673298357787807255866857471820031544288470873756667803333148752770390468046424569847612768834096179110732081807091215707606221508748438513288164953527598697891287426751502770811278403981975747
N = p*q
d = 573070353892574234822161279047183543775530185349126625638723140620907823289880524319900903107958537604062997621111400225360581628128658171063233186721248596468227744823708812145601535756275823369469329602243812393745758404713203298420203953558222333252130212403543188771504460645580805247486984758213985591481084124896668648126734749740493930292472770419389289747091389281535085020999787788556461012279527887801655327988906781150443024082119810997232276830895366950527494650113681664406596431563112239730714179590610936600185792569958229808348997501969453948650870974246751055095310504896230586270530800278865147024288571913154878266959379812777077385750415586996440072380122481280710186853253498255179737144743317075260218419689704897253237450391286544597073939620537514284796792748610935321423874829109662213416457853249054902246205285113646938754450773908229086610087250213142908834543128852626240695022268486546817091058950924301362457137998820157367755045866004513178219562418014755532688353059669536588757409625437345169448146640949359972007204096322983825649260820488625875675139052360442027815388549639361919033127124213579546358672835990492870892222336439506662329461687079727759474209302134234381900360337097793348612214165
ct = pow(bytes_to_long(FLAG),e,N)

p_modified = bin(p)[2:]

modified_bits = random.sample(range(len(p_modified)),k=2)
p_modified = p_modified[:min(modified_bits)] + ('0' if p_modified[min(modified_bits)] == '1' else '1') + p_modified[min(modified_bits)+1:max(modified_bits)] + ('0' if p_modified[max(modified_bits)] == '1' else '1') + p_modified[max(modified_bits)+1:]

my_paper = open("my_paper",'w')
my_paper.write("e = {}\n".format(e))
my_paper.write("N = {}\n".format(N))
my_paper.write("message = {}\n".format(ct))
my_paper.write("p = \"{}\"\n".format(p_modified))
