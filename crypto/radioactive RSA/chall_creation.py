from Crypto.Util.number import getStrongPrime, inverse, GCD, bytes_to_long, long_to_bytes
from Crypto.Util.Padding import pad
from Crypto.Cipher import AES
import os, string, random, hashlib

memory_file = open("corrupted_memory", "wb")
message = open("intercepted_message", 'w')

FLAG = b"L30n4rd_P0w3r_Pl4nt_1s_0n_F1r3!"

def garbage(file, n) :
    alphabet = list(string.printable)[:-6]
    for k in range(1,n+1) :
        if 0.05 > random.random() :
            file.write(random.choice(alphabet).encode('ascii'))
        else :
            file.write(bytes(1))
        if k%32 == 0 :
            file.write('\n'.encode('ascii'))
    if n%32 :
        file.write('\n'.encode('ascii'))

def void(file, n) :
    for k in range(1,n+1) :
        file.write(bytes(1))
        if k%32 == 0 :
            file.write('\n'.encode('ascii'))

def corruption(binary : str, corrupted = 0.25) :
    res = ""
    start = binary.find('1')
    for b in binary[:start//2] :
        if random.random() < corrupted :
            res += '0' if b == '1' else '1'
        else :
            res += b
    res += '1' # previous bits on the 1st byte are altered for sure
    for b in binary[start//2+1:] :
        if random.random() < corrupted :
            res += '0' if b == '1' else '1'
        else :
            res += b
    return res

e = 0x10001
"""
while True:
    for k in range(5):
        p = getStrongPrime(2048)
        q = getStrongPrime(2048)
        phi = (p-1)*(q-1)
        d = inverse(e, phi)
    if d > 1 and GCD(e, phi) == 1 and d*e//phi > e//2:
        break
"""
p = 27836448638585867649333068100942976220006301565052550802379210040385591955450913166644955716335041589477930692821841039905913983491677502230815379048823820975259271042423710540613614205729075317182133409090078279102979304803433246886507780403094972446287307884321778687151801675651684117514721065762193819884770404285365741650070894260909803427262867278099209086434137282938805594183377357642550376846415123004522757116146518193901222573306789348640466055248427879732029357054513870791130512156622426359883881975560311621107561704274687777222149641373852957433784936192604760316525068699329406431884071541679354674957
q = 32088482871009956278751271639250175338097763633028977943484619695989123033102642390427275660908105607068285272438039888811487947019822402410872965223312163595541416919101545729043629661218855793273165934603315524800120756981730419835284706175260199450878469717053262543698915734250435241356889203907154048173840131349951012241637003201180230064827081817485604291315255122507172774945355993268704346107305248787035401644405676021333555873546506926666944382389478457228214032880754675793824756387390827897277965925072553077684744505441816208958887925419164167739488338327649876273661364332251928841647785452791491167149
N = q*p
d = 768002559788889369293989904249834972308780823115017085717628856287440521656280572459218221508745170536658971263358475163121601733088258016887659446193831274078032569743163318667509350883503439884946536897503536768296619543317880079802782019642234816085778150673954087515207994379320694336357091157654121439367841477454543113262670065231099862232480841787349859074659150109092442805323277095683222795072990109480955987471538235039893777410866710794982669219621699214807485869284339731091811776716052020488601353896193130156855931601902963854423204533894318785613728350594022336411584433332612058221505654447298470495013890240096024139177611252404989868212721386561817916992669156852454509294671553109464745229619779615884509254123254073669851885295205824593124406691393014185159656069049330498330904350076590502673015074289887899300723396538328893952455133946767728090178789401024218452774405267033887012212444185416318464286490548908704306690273433682109393618201453213664388851498011975906622805158506510810645997832001442258164116745836171658138565936138772177791100940324202504487833287506889119481795940959807604494967240096624282659336570344412878893965558758143405763230574427920366807486993638654229124247496708305966715716049
ct = pow(bytes_to_long(FLAG),e,N)

"""
mix_order = ""
d2 = bin(d)[2:][::-1]
d2 = bin(int(d2,2) ^ d)[-1600:]
while(len(mix_order)//2+1 != 11) :
    mix_order = ""
    d2_blocs = [d2[k*1600//8:(k+1)*1600//8] for k in range(8)]
    d2_mixed_up = [None] * 8
    while None in d2_mixed_up :
        r = random.randint(0,7)
        if d2_mixed_up[r] :
            r = random.randint(0,7)
        if not d2_mixed_up[r] :
            d2_mixed_up[r] = d2_blocs.pop()
        mix_order += '-'+str(r) if mix_order else str(r)
    d2_mixed_up = "".join(d2_mixed_up)
"""

d
d2_mixed_up
mix_order = "2-0-7-6-4-2-2-5-7-1-3"

derived_aes_key = hashlib.sha256(mix_order.encode('ascii')).digest()
iv = os.urandom(16)
cipher = AES.new(derived_aes_key, AES.MODE_CBC, iv)
d2_mixed_up_encrypted = cipher.encrypt(pad(int(d2_mixed_up,2).to_bytes((len(d2_mixed_up)+7)//8,'big'),16,'pkcs7'))

mix_protection_hash = hashlib.md5()
mix_protection_hash.update(mix_order.encode('ascii'))

message.write(str(N)+'\n'+str(e)+'\n'+str(ct)+'\n'+"{}:{}\n".format(iv.hex(), d2_mixed_up_encrypted.hex())+"{}:{}\n".format(len(mix_order)//2+1, mix_protection_hash.hexdigest()))

corrupted_d = corruption(bin(d)[2:].zfill(4096))
corrupted_d = hex(int(corrupted_d,2))[2:].zfill(512)
corrupted_d = ':'.join([corrupted_d[k-2:k] for k in range(len(corrupted_d),0,-2)][::-1])

garbage(memory_file, 311)
for k in range((len(corrupted_d)-1)//(3*16)+1) :
    memory_file.write((corrupted_d[3*16*k:3*16*(k+1)]+'\n').encode('ascii'))
garbage(memory_file, 199)
garbage(memory_file, 149)
garbage(memory_file, 299)
